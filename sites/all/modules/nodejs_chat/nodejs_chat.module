<?php

/**
 * @file
 * nodejs_chat module.
 * Simple chat block using NodeJS on the backend.
 */

/* Constant for the 'drupal' message transmission option. */
define('NODEJS_CHAT_MESSAGE_TRANSMISSION_DRUPAL', 'drupal');

/* Constant for the 'nodejs server extension' message transmission option. */
define('NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION', 'nodejs server extension');

/**
 * Implements hook_menu().
 */
function nodejs_chat_menu() {
  $items['nodejs-chat/message/post/%'] = array(
    'page callback' => 'nodejs_chat_chatwindow_post',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function nodejs_chat_help($path, $arg) {
  $help_text = '';
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#nodejs_chat':
      $help_text .= t('This page contains some information and details regarding
        the usage of the Node JS Chat module for drupal.<br> At the moment, the information
        available here is about the different configuration settings for the chat block.');
      $help_text .= '<h1>Node JS Chat Block settings:</h1>';
      $help_text .= '<p>' . t('<b>Message Transmission:</b> This refers to how the
        messages will be transmitted between the chat users.') . '</p>';
      $help_text .= '<p>' . t('Choosing <em><b>"Drupal"</b></em>, messages will be sent
        to the current drupal site, which will pass them to the Node JS server,<br>
        that will finally send them to the rest of users connected to the Chat.<br>') .'</p>';
      $help_text .= '<p style="margin-left: 150px;"><b>Browser ==> Drupal ==> Node JS Server ==> Users</b></p>';
      $help_text .= '<p>' . t('When using <em><b>"Nodejs Server Extension"</b></em>, messages will go straight to the Node JS server,
        and then passed on <br> to the rest of users connected to the Chat. For this option to work,
        make sure the "nodejs_chat.module.js" server <br> extension is installed, as described in the
        README.txt file.') . '</p>';
      $help_text .= '<p style="margin-left: 150px;"><b>Browser ==> Node JS Server ==> Users</b></p>';
  }
  return $help_text;
}

/**
 * Implements hook_block_info().
 */
function nodejs_chat_block_info() {
  $blocks['nodejs_chat'] = array(
    'info' => 'Node JS Chat Block',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function nodejs_chat_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'nodejs_chat':
      $form['nodejs_chat_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Chat Title'),
        '#description' => t('The title for the Chat Window.'),
        '#default_value' => variable_get('nodejs_chat_title', 'Node JS Chat'),
      );
      // Let users choose the transmission method for messages.
      $form['nodejs_chat_message_transmission'] = array(
        '#type' => 'select',
        '#title' => t('Message Transmission'),
        '#description' => t('See the ' . l('Node JS Chat help page', 'admin/help/nodejs_chat', array('attributes' => array('target' => '_blank')))
          . ' for information about the Message Transmission options.'),
        '#default_value' => variable_get('nodejs_chat_message_transmission', NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION),
        '#options' => drupal_map_assoc(array(NODEJS_CHAT_MESSAGE_TRANSMISSION_DRUPAL, NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION), 'ucwords'),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function nodejs_chat_block_save($delta = '', $edit = array()) {
  // Save the message transmission method.
  if ($delta == 'nodejs_chat') {
    variable_set('nodejs_chat_message_transmission', $edit['nodejs_chat_message_transmission']);
    variable_set('nodejs_chat_title', $edit['nodejs_chat_title']);
  }
}

/**
 * Implements hook_block_view().
 */
function nodejs_chat_block_view($delta = '') {
  switch ($delta) {
    case 'nodejs_chat':
      global $user;
      if (!$user->uid) return;
      $path = current_path();
      $chat_title = variable_get('nodejs_chat_title', 'Node JS Chat');
      $message_transmission = variable_get('nodejs_chat_message_transmission', NODEJS_CHAT_MESSAGE_TRANSMISSION_SERVER_EXTENSION);
      $chat = new Chat($path, $chat_title, array('messageTransmission' => $message_transmission));

      $block['subject'] = t('Chat');
      $block['content'] = $chat->render();
    break;
  }
  return $block;
}

/**
 * Posts a message to a socket.io channel (chatwindow)
 */
function nodejs_chat_chatwindow_post($chatwindow) {
  // No message, no party
  if (!isset($_POST['message'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'invalid')));
    drupal_exit();
  }

  global $user;
  $message = (object) array(
    'channel' => $chatwindow,
    'callback' => 'nodejsChatMessageHandler',
    'data' => array(
      'uid' => $user->uid,
      'name' => $user->name,
      'msg' => $_POST['message'],
    ),
  );
  nodejs_send_content_channel_message($message);
  drupal_json_output(array('data' => array('accessGranted' => 'Message ok')));
  drupal_exit();
}

/**
 * Implements hook_theme().
 */
function nodejs_chat_theme() {
  return array(
    'nodejs_chat_users' => array(
      'variables' => array('user_ids' => array()),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'nodejs_chat') . '/theme',
    ),
  );
}

/**
 * Adds a new channel to the nodejs_chat_channels table.
 *
 * @param string $channel_name
 *   The name of the channel to create.
 * @param array $users
 *   Array containing the User IDs of the initial users with access to the chat.
 * @param array $settings
 *   Associative array with any settings to be stored for the channel.
 *
 * @return bool
 *   TRUE, if the channel was successfully created. FALSE otherwise.
 */
function nodejs_chat_create_channel($channel_name, $users = array(), $settings = array()) {
  // Users and settings will be needed serialze both for watchdog and db_insert.
  $users = serialize($users);
  $settings = serialize($settings);

  try {
    $result = db_insert('nodejs_chat_channels')
      ->fields(array('channel' => $channel_name, 'users' => $users, 'settings' => $settings))
      ->execute();
  }
  catch (Exception $e) {
    nodejs_chat_chat_creation_watchdog('create', $channel_name, $e->getMessage(), $users, $settings);
    return FALSE;
  }
  if (!is_null($result)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Deletes a channel from the nodejs_chat_channels table.
 *
 * @param string $channel_name
 *   The name of the channel to delete.
 *
 * @return bool
 *   TRUE if the channel was deleted, FALSE otherwise.
 */
function nodejs_chat_delete_channel($channel_name) {
  try {
    db_delete('nodejs_chat_channels')
      ->condition('channel', $channel_name)
      ->execute();
  }
  catch (Exception $e) {
    nodejs_chat_chat_creation_watchdog('delete', $channel_name, $e->getMessage());
    return FALSE;
  }
  return TRUE;
}

/**
 * Loads a Node js Chat Channel.
 *
 * @param string $channel_name
 *   The name of the channel to load.
 *
 * @return mixed
 *   An associative array, containing the channel properties, if the channel
 *   is succesfully loaded. NULL otherwise. Channel properties are:
 *
 *    - channel: the channel name.
 *    - users: Array with UIDs of the users with access to the channel.
 *    - settings: Array with the channel / chat settings.
 */
function nodejs_chat_load_channel($channel_name) {
  try {
    $channel = db_select('nodejs_chat_channels', 'chat_ch')
      ->fields('chat_ch', array())
      ->condition('channel', $channel_name)
      ->execute()->fetchAssoc();
  }
  catch (Exception $e) {
    nodejs_chat_chat_creation_watchdog('load', $channel_name, $e->getMessage());
    return NULL;
  }

  // If channel was loaded, unserialize the users and settings.
  if ($channel != FALSE) {
    $channel['users'] = unserialize($channel['users']);
    $channel['settings'] = unserialize($channel['settings']);
  }
  return $channel;
}

/**
 * Loads all Node js Chat Channels.
 *
 * @return array
 *   An array with all the existing chat channels on nodejs_chat_channels table.
 *   Each channel contains the following properties:
 *
 *    - channel: the channel name.
 *    - users: Array with UIDs of the users with access to the channel.
 *    - settings: Array with the channel / chat settings.
 */
function nodejs_chat_load_all_channels() {
  $channels = db_select('nodejs_chat_channels', 'chat_ch')
    ->fields('chat_ch', array())
    ->execute();

  $chat_channels = array();
  while ($channel = $channels->fetchAssoc()) {
    $channel['users'] = unserialize($channel['users']);
    $channel['settings'] = unserialize($channel['settings']);
    $chat_channels[] = $channel;
  }
  return $chat_channels;
}

/**
 * Updates on the nodejs_chat_channels table.
 *
 * @param string $channel_name
 *   The name of the channel to update.
 * @param array $users
 *   Array containing the User IDs of the users that will stay on the channel.
 * @param array $settings
 *   Associative array with the new channel settings.
 *
 * @return bool
 *   TRUE, if the channel was successfully updated. FALSE otherwise.
 */
function nodejs_chat_update_channel($channel_name, $users = array(), $settings = array()) {
  // Users and settings will be needed serialze both for watchdog and db_insert.
  $users = serialize($users);
  $settings = serialize($settings);

  try {
    $updated_rows = db_update('nodejs_chat_channels')
      ->condition('channel', $channel_name)
      ->fields(array('users' => $users, 'settings' => $settings))
      ->execute();
  }
  catch (Exception $e) {
    nodejs_chat_chat_creation_watchdog('update', $channel_name, $e->getMessage(), $users, $settings);
    return FALSE;
  }

  if ($updated_rows === 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Creates a watchdog entry for a given channel operation.
 *
 * This function is a wrapper around watchdog, so that all the functions dealing
 * with operations on the nodejs_chat_channels table can benefit of it, instead
 * of having the same call spread on different places with minor variations.
 *
 * @param string $op
 *   The Operation being performed ('create', 'delete', 'load', 'update').
 * @param string $channel_name
 *   The name of the channel being affected by the operation.
 * @param string $message
 *   The message of the exception thrown (if any) when performing the operation.
 * @param array $users
 *   Array of user ids that was passed (if any) for the operation.
 * @param array $settings
 *   Array of chat settings that was passed (if any) for the operation.
 */
function nodejs_chat_chat_creation_watchdog($op, $channel_name, $message = array(), $users = array(), $settings = array()) {
  watchdog('nodejs_chat', 'Failed attempt to @op a chat channel. Exception message: @message. Channel name: @channel.
      Users: @users Settings: @settings. ', array(
    '@op' => $op,
    '@message' => $message,
    '@channel' => $channel_name,
    '@users' => $users,
    '@settings' => $settings,
  ));
}

/**
 * Implements hook_nodejs_message_response_alter().
 *
 * Whenever a user is set offline, this function makes sure that the user is
 * removed from the existing chat channels, and if he's the last user present in
 * a given channel, triggers the removal of that channel too.
 *
 * This is not great performance-wise, but right now nodejs doesn't offer much
 * data to do this in a much better way out of the box. Need nodejs module to
 * provide custom specific callbacks for userOffline messages too, and not only
 * for custom messages. Also need server.js to send info about the channel that
 * triggered the 'disconnect' message (if possible), or, if not that, at least
 * the list of channels in which the user was present, so that chat module does
 * not need to go through all chat channels looking whether the user was present
 * there or not.
 */
function nodejs_chat_nodejs_message_response_alter(&$response, &$message) {
  switch ($message['messageType']) {
    case 'userOffline':
      // Check all existing chat channels, and remove the given user from those
      // in which he's present.
      $chat_channels = nodejs_chat_load_all_channels();
      foreach ($chat_channels as $channel) {
        $user_index = array_search($message['uid'], $channel['users']);
        if ($user_index !== FALSE) {
          unset($channel['users'][$user_index]);
          // No other users left. Remove channel.
          if (empty($channel['users'])) {
            nodejs_chat_delete_channel($channel['channel']);
            nodejs_get_remove_channel($channel['channel']);
          }
          else {
            nodejs_chat_update_channel($channel['channel'], $channel['users'], $channel['settings']);
          }
        }
      }
      break;
  }
  return NULL;
}

/**
 * Removes all channels currently empty.
 *
 * This function is not ideal performance-wise, but right now nodejs module core
 * doesn't provide info when notifying about a user going offline, so it's not
 * possible to update a given channel everytime that happens, and all have to be
 * checked instead.
 *
 * (This can be handled better if using a server.js extension).
 */
function nodejs_chat_remove_empty_channels() {
  $chat_channels = nodejs_chat_load_all_channels();
  foreach ($chat_channels as $channel) {
    if ((empty($channel['users']))) {
      nodejs_chat_delete_channel($channel['channel']);
      // Remove chat from node.js server too.
      nodejs_get_remove_channel($channel['channel']);
    }
  }
}

/**
 * Implements hook_cron().
 */
function nodejs_chat_cron() {
  nodejs_chat_remove_empty_channels();
}

/**
 * Implements hook_nodejs_message_callback().
 */
function nodejs_chat_nodejs_message_callback() {
  return array(
    'nodejs_chat_chat_init' => 'nodejs_chat_verify_channel_access',
  );
}

/**
 * Authentication callback to verify that a user can be added to a chat channel.
 *
 * @see nodejs_chat_nodejs_message_callback().
 */
function nodejs_chat_verify_channel_access(&$message, &$response) {
  $access_granted = FALSE;

  // Check all the required data is present. If so, check user access to chat.
  if (isset($message['data']['user']['uid']) || !isset($message['channel'])) {
    $access_granted = nodejs_chat_user_can_access_channel($message['data']['user']['uid'], $message['channel']);
  }

  // Access granted.
  if ($access_granted) {
    $response['message'] = "Access granted to channel: " . $message['channel'] . " for  user UID: " . $message['data']['user']['uid'] ;
    $response['data'] = TRUE;
  }
  // User shouldn't access that chat channel.
  else {
    $response['message'] = "Access not granted to channel: " . $message['channel'] . " for the given user";
    $response['data'] = FALSE;
  }
}

/**
 * Checks whether a given user has access to a given chat channel.
 *
 * @param int $uid
 *   The User ID of the user for which access is being checked.
 * @param string $channel_name
 *   Name of the chat channel for which the access is being checked.
 */
function nodejs_chat_user_can_access_channel($uid, $channel_name) {
  if ($channel = nodejs_chat_load_channel($channel_name)) {
    return in_array($uid, $channel['users']);
  }
  return FALSE;
}
